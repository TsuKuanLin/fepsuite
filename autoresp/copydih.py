#!/usr/bin/env python

import sys
import prepi

if len(sys.argv) < 5:
    print "Usage: %s  (prep) (dihedralspec) (newatomtype) (ambfrc)" % sys.argv[0]
    print "example: %s ionsine.prep O4\'-C1\'-N9-C8 CP $AMBERHOME/dat/leap/parm/parm10.dat" % sys.argv[0]
    sys.exit(1)

# FIXME: support other than parm10?

mass = []
bonds = []
angles = []
dihedrals = []
impropers = []
nonbonded = []
with open(sys.argv[4], "r") as fh:
    _title = fh.next()
    for l in fh:
        if l.strip() == "":
            break
        ls = l.split()[0:2]
        mass.append((ls[0], float(ls[1])))
    _specialatoms = fh.next()
    for l in fh:
        if l.strip() == "":
            break
        a1 = l[0:2].strip()
        a2 = l[3:5].strip()
        [k, l0] = l[5:].split(None, 2)[0:2]
        k = float(k)
        l0 = float(l0)
        bonds.append((a1, a2, k, l0))
    for l in fh:
        if l.strip() == "":
            break
        a1 = l[0:2].strip()
        a2 = l[3:5].strip()
        a3 = l[6:8].strip()
        [k, a0] = l[8:].split(None, 2)[0:2]
        k = float(k)
        a0 = float(a0)
        angles.append((a1, a2, a3, k, a0))
    for l in fh:
        if l.strip() == "":
            break
        a1 = l[0:2].strip()
        a2 = l[3:5].strip()
        a3 = l[6:8].strip()
        a4 = l[9:11].strip()
        [m, k, d0, c0] = l[11:].split(None, 4)[0:4]
        m = int(m)
        k = float(k)
        d0 = float(d0)
        c0 = float(c0)
        dihedrals.append((a1, a2, a3, a4, m, k, d0, c0))
    for l in fh:
        if l.strip() == "":
            break
        a1 = l[0:2].strip()
        a2 = l[3:5].strip()
        a3 = l[6:8].strip()
        a4 = l[9:11].strip()
        [k, d0, c0] = l[11:].split(None, 3)[0:3]
        k = float(k)
        d0 = float(d0)
        c0 = float(c0)
        impropers.append((a1, a2, a3, a4, k, d0, c0))
    for l in fh:
        # settle
        if l.strip() == "":
            break
    equivalence = []
    for l in fh:
        # some unknown factor
        if l.strip() == "":
            break
        ls = l.split()
        for at in ls[1:]:
            equivalence.append((at, ls[0]))
        
    modre = fh.next()
    assert modre.split() == ["MOD4", "RE"]
    for l in fh:
        if l.strip() == "":
            break
        [atom, sig, eps] = l.split(None, 3)[0:3]
        sig = float(sig)
        eps = float(eps)
        nonbonded.append((atom, sig, eps))
    for (atfrom, atto) in equivalence:
        for l in nonbonded:
            if l[0] == atto:
                nonbonded.append((atfrom, l[1], l[2]))
                break

if False:
    print mass
    print bonds
    print angles
    print dihedrals
    print impropers
    print nonbonded

prep = prepi.prepi(sys.argv[1])

diheds = sys.argv[2].split('-')
replace_atom = diheds[3]
diheds_inds = [prep.atommap[a] for a in diheds]
diheds_ats = [prep.atoms[i][1] for i in diheds_inds]
original_atomtype = diheds_ats[3]
new_atomtype = sys.argv[3]

def get_atomtype(targlst, nlook, at):
    """Finds atomtype [at] from [targlst] by looking up first [nlook] elements."""

    ret = []
    for l in targlst:
        if at in list(l)[0:nlook]:
            ret.append(l)
    return ret

def replace_atomtype(lst, nat, at, replace, dihedral = False):
    ret = []
    cur = []
    for l in lst:
        if dihedral and l[7] < 0.:
            cur.append(l)
            continue
        cur.append(l)
        for i in range(nat):
            if cur[0][i] != at:
                continue
            for ll in cur:
                assert ll[i] == at
                lx = list(ll)
                lx[i] = replace
                ret.append(tuple(lx))
        cur = []
    return ret

def get_replace_atomtype(targlst, nlook, at, replace, dihedral = False):
    ats = get_atomtype(targlst, nlook, at)
    ret = replace_atomtype(ats, nlook, at, replace, dihedral)
    return ret

print "Generated by %s" % " ".join(sys.argv)
print "MASS"
for l in get_replace_atomtype(mass, 1, original_atomtype, new_atomtype):
    print "%-2s %-8.3lf   %8.3lf" % (l[0], l[1], 0.0)
print

print "BOND"
for l in get_replace_atomtype(bonds, 2, original_atomtype, new_atomtype):
    print "%2s-%2s%8.2lf%8.3lf" % l
print

print "ANGLE"
for l in get_replace_atomtype(angles, 3, original_atomtype, new_atomtype):
    print "%2s-%2s-%2s%9.3lf%12.3lf" % l
print

print "DIHE"
dihe_lines = []
for l in get_atomtype(dihedrals, 4, original_atomtype):
    if (list(l)[0:4] == diheds_ats or
        list(l)[0:4] == diheds_ats[-1::-1]):
        continue
    dihe_lines.append(l)
for l in replace_atomtype(dihe_lines, 4, original_atomtype, new_atomtype, True):
    print "%2s-%2s-%2s-%2s%4d%9.3lf%14.3lf%16.3lf" % l
for i in range(1, 5):
    c0 = -i
    if i == 4:
        c0 = i
    print ("%2s-%2s-%2s-%2s%4d%9.3lf%14.3lf%16.3lf         %s" % 
           (diheds_ats[0], diheds_ats[1], diheds_ats[2], new_atomtype,
            1, 
            0.0, 0.0,
            float(c0),
            "Opt target %d" % i))
print

print "IMPROPER"
for l in get_replace_atomtype(impropers, 4, original_atomtype, new_atomtype):
    print "%2s-%2s-%2s-%2s %11.1lf%15.1lf%12.1lf" % l
print

print "NONBON"

for l in get_replace_atomtype(nonbonded, 1, original_atomtype, new_atomtype):
    print "  %-2s%16.4lf%8.4lf" % l
for i in range(3):
    print 
